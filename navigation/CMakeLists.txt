cmake_minimum_required(VERSION 2.8.3)
project(navigation)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  dji_sdk
#  cv_bridge 
)
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR})
find_package(Eigen REQUIRED)


## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs  # Or other packages containing msgs
# )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
  LIBRARIES navigation
#  CATKIN_DEPENDS other_catkin_pkg
#  DEPENDS system_lib
  DEPENDS dji_sdk Eigen # cv_bridge
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(include)
include_directories(${catkin_INCLUDE_DIRS}
                    ${Eigen_INCLUDE_DIRS}
                
)
#~ include_directories("/usr/local/include")

## Declare a C++ library
#add_library(navigation src/navigation.cpp )
add_library(MPCController src/MPCController.cpp )
add_library(KalmanFilter src/KalmanFilter.cpp )
add_library(ExtendedKalmanFilter src/ExtendedKalmanFilter.cpp )

add_library(abs src/abs.cpp)
add_library(eye src/eye.cpp)
add_library(inv src/inv.cpp)
add_library(mpcqpsolver src/mpcqpsolver.cpp)
add_library(mpower src/mpower.cpp)
add_library(norm src/norm.cpp)
add_library(qpkwik src/qpkwik.cpp)
add_library(qr src/qr.cpp)
add_library(rtGetInf src/rtGetInf.cpp)
add_library(rtGetNaN src/rtGetNaN.cpp)
add_library(rt_nonfinite src/rt_nonfinite.cpp)
add_library(solveQP src/solveQP.cpp src/inv.cpp src/mpower.cpp src/mpcqpsolver.cpp src/eye.cpp src/qpkwik.cpp src/abs.cpp src/norm.cpp src/qr.cpp src/xgemv.cpp src/xnrm2.cpp src/xger.cpp)
add_library(solveQP_emxAPI src/solveQP_emxAPI.cpp)
add_library(solveQP_emxutil src/solveQP_emxutil.cpp)
add_library(solveQP_initialize src/solveQP_initialize.cpp src/rt_nonfinite.cpp src/rtGetInf.cpp src/rtGetNaN.cpp)
add_library(solveQP_terminate src/solveQP_terminate.cpp)
add_library(xgemv src/xgemv.cpp)
add_library(xgeqrf src/xgeqrf.cpp)
add_library(xger src/xger.cpp)
#~ add_library(xgetrf src/xgetrf.cpp)
add_library(xnrm2 src/xnrm2.cpp)
add_library(xscal src/xscal.cpp)
#~ add_library(xpotrf src/xpotrf.cpp)
#~ add_library(xzlarf src/xzlarf.cpp)
#~ add_library(xzlarfg src/xzlarfg.cpp)

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(navigation ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
add_executable(navigation_node src/navigation_node.cpp)# src/MPCController.cpp)

#~ add_executable(navigation_node_simulation src/navigation_node_simulation.cpp)

# add_executable(navigation_node_simulation src/navigation_node_simulation.cpp)

add_executable(navigation_menu src/navigation_menu.cpp)

#~ add_executable(main src/main.cpp)

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(navigation_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(navigation_node navigation_generate_messages_cpp)

#~ add_dependencies(navigation_node_simulation navigation_generate_messages_cpp)

# add_dependencies(navigation_node_simulation navigation_generate_messages_cpp)

add_dependencies(navigation_menu navigation_generate_messages_cpp)
# add_dependencies(MPCController navigation_generate_messages_cpp)

## Specify libraries to link a library or executable target against
target_link_libraries(navigation_node ${catkin_LIBRARIES} ${Eigen_LIBRARIES} 
    MPCController KalmanFilter ExtendedKalmanFilter 
    abs eye inv mpcqpsolver mpower norm qpkwik qr rtGetInf rtGetNaN rt_nonfinite 
    solveQP solveQP_emxAPI solveQP_emxutil solveQP_initialize solveQP_terminate xgemv xgeqrf xger xnrm2 xscal
)
#"/usr/local/lib/lbnlopt.a"  ${nlopt_LIBRARIES}
#~ target_link_libraries(navigation_node_simulation ${catkin_LIBRARIES} ${Eigen_LIBRARIES})

# target_link_libraries(navigation_node_simulation ${catkin_LIBRARIES} ${Eigen_LIBRARIES})

target_link_libraries(navigation_menu ${catkin_LIBRARIES} )
# target_link_libraries(MPCController ${catkin_LIBRARIES}  ${Eigen_LIBRARIES} )

#~ target_link_libraries(main ${catkin_LIBRARIES} abs eye inv mpcqpsolver mpower norm qpkwik qr rtGetInf rtGetNaN rt_nonfinite solveQP solveQP_emxAPI solveQP_emxutil solveQP_initialize solveQP_terminate xgemv xgeqrf xger xnrm2)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS navigation # navigation_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
#)

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_navigation.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
